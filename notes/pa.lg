// define a convenience predicate
triple_terms = forall a forall b forall c : ~TripleTerms(a b c) + Term(a)*Term(b)*Term(c)
// define conversion
e2e = forall a forall b: ~Term(a) + ~Term(b) + ~E(a b) + E(b a)
i2i = forall a forall b : ~Term(a) + ~Term(b) + ~I(a b) + I(b a)
a2i = forall a forall b : ~Term(a) + ~Term(b) + ~A(a b) + I(b a)
// define the "perfect" deductions
Barbara = forall a forall b forall c : ~TripleTerms(a b c) + ~A(a b) + ~A(b c) + A(a c)
Celarent = forall a forall b forall c: ~TripleTerms(a b c) + ~E(a b) + ~A(b c) + E(a c)
Darii = forall a forall b forall c: ~TripleTerms(a b c) + ~A(a b) + ~I(b c) + I(a c)
Ferio = forall a forall b forall c: ~TripleTerms(a b c) + ~E(a b) + ~I(b c) + O(a c)
// prior analytics A5
second_figure = forall a forall b forall c: ~SecondFigureSyllog(a b c) + TripleTerms(a b c)*A(a b)*E(a c) + TripleTerms(a b c)*A(a b)*A(a c) + TripleTerms(a b c)*E(a b)*E(a c)
second_figure_definition = forall a forall b forall c: ~SecondFigureSyllog(a b c) + MiddleTerm(a)*ExtremeTerm(b)*ExtremeTerm(c)

prop1 = forall a forall b forall c: ~TripleTerms(a b c) + ~E(a b) + ~A(a c) + E(c b)

// Emn (no immortal is a man) 
// Amx (all kings are men)
// --
// Exn (no immortal is a king)
// aristotle proof
// Emn yield Enm (no man is immortal) -- eta conversion
// Enm, Amx - Enx (no king is immortal ) -- celarent
// Enx - Exn (no immortal is a king) -- eta conversion
:Ceasare prop1
:
s = given
s = apply s triple_terms a b c
s = apply s e2e a b
s = apply s Celarent b a c
x = [ 1 triple_terms
s = apply s x b a c
s = apply s e2e b c
a = / 0 s
b = / 9 s
s = merge a b
: s

// some meta definitions
quantifiedRelation = forall a : ~All(a) + ~None(a) + ~Some(a) + ~SomeNot(a) + ~QuantifiedRelation(a)
argument = forall a forall b forall c: ~QuantifiedRelation(a) + ~QuantifiedRelation(b) + ~QuantifiedRelation(c) + ~ShareTerms(a b c) + Argument(a b c)
syllogizes = forall a forall b forall c: ~Argument(a b c) + ~CounterExample(a b c) + Syllogism(a b c)
counter = forall a forall b forall c thereis d thereis e thereis f: ~Argument(a b c) + Argument(d e f)*Differ(f c)*CounterExample(a b c) + ~CounterExample(a b c)
// furthermore, we can see that A(a b),A(a c) yields both E(b c) and A(b c). for example, all animals are substance, all men are substance, and all men are animals. but all number are substance, all animals are substance, but no animals is a number
// let's the leave the metatheoretical statements alone for the time being
#prop2 = forall a forall b forall c : ~Argument(a b c) + ~All(a) + ~A

prop2 = forall a forall b forall c : ~TripleTerms(a b c) + ~A(a b) + ~E(a c) + E(b c)
:Camestres prop2
#prop3 = forall a forall b forall c: ~TripleTerms(a b c) + ~A(a b) + ~O(a c) + O(b c)

:
s = given
s = apply s triple_terms a b c
s = apply s a2i a b
s = apply s e2e a c
s = apply s Celarent c a b
x = [ 1 triple_terms
s = apply s x c a b
s = apply s e2e c b
t1 = / 10 s
t2 = / 0 s
p = merge t1 t2
p = merge t2 t1
: p
